// Code generated by "enumer -linecomment -yaml -text -json -type=AllowedExternalDirectives"; DO NOT EDIT.

package backy

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AllowedExternalDirectivesName = "DefaultExternalDirvaultvault-filevault-file-envfile-envfileenv"

var _AllowedExternalDirectivesIndex = [...]uint8{0, 18, 23, 33, 47, 55, 59, 62}

const _AllowedExternalDirectivesLowerName = "defaultexternaldirvaultvault-filevault-file-envfile-envfileenv"

func (i AllowedExternalDirectives) String() string {
	if i < 0 || i >= AllowedExternalDirectives(len(_AllowedExternalDirectivesIndex)-1) {
		return fmt.Sprintf("AllowedExternalDirectives(%d)", i)
	}
	return _AllowedExternalDirectivesName[_AllowedExternalDirectivesIndex[i]:_AllowedExternalDirectivesIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AllowedExternalDirectivesNoOp() {
	var x [1]struct{}
	_ = x[DefaultExternalDir-(0)]
	_ = x[AllowedExternalDirectiveVault-(1)]
	_ = x[AllowedExternalDirectiveVaultFile-(2)]
	_ = x[AllowedExternalDirectiveAll-(3)]
	_ = x[AllowedExternalDirectiveFileEnv-(4)]
	_ = x[AllowedExternalDirectiveFile-(5)]
	_ = x[AllowedExternalDirectiveEnv-(6)]
}

var _AllowedExternalDirectivesValues = []AllowedExternalDirectives{DefaultExternalDir, AllowedExternalDirectiveVault, AllowedExternalDirectiveVaultFile, AllowedExternalDirectiveAll, AllowedExternalDirectiveFileEnv, AllowedExternalDirectiveFile, AllowedExternalDirectiveEnv}

var _AllowedExternalDirectivesNameToValueMap = map[string]AllowedExternalDirectives{
	_AllowedExternalDirectivesName[0:18]:       DefaultExternalDir,
	_AllowedExternalDirectivesLowerName[0:18]:  DefaultExternalDir,
	_AllowedExternalDirectivesName[18:23]:      AllowedExternalDirectiveVault,
	_AllowedExternalDirectivesLowerName[18:23]: AllowedExternalDirectiveVault,
	_AllowedExternalDirectivesName[23:33]:      AllowedExternalDirectiveVaultFile,
	_AllowedExternalDirectivesLowerName[23:33]: AllowedExternalDirectiveVaultFile,
	_AllowedExternalDirectivesName[33:47]:      AllowedExternalDirectiveAll,
	_AllowedExternalDirectivesLowerName[33:47]: AllowedExternalDirectiveAll,
	_AllowedExternalDirectivesName[47:55]:      AllowedExternalDirectiveFileEnv,
	_AllowedExternalDirectivesLowerName[47:55]: AllowedExternalDirectiveFileEnv,
	_AllowedExternalDirectivesName[55:59]:      AllowedExternalDirectiveFile,
	_AllowedExternalDirectivesLowerName[55:59]: AllowedExternalDirectiveFile,
	_AllowedExternalDirectivesName[59:62]:      AllowedExternalDirectiveEnv,
	_AllowedExternalDirectivesLowerName[59:62]: AllowedExternalDirectiveEnv,
}

var _AllowedExternalDirectivesNames = []string{
	_AllowedExternalDirectivesName[0:18],
	_AllowedExternalDirectivesName[18:23],
	_AllowedExternalDirectivesName[23:33],
	_AllowedExternalDirectivesName[33:47],
	_AllowedExternalDirectivesName[47:55],
	_AllowedExternalDirectivesName[55:59],
	_AllowedExternalDirectivesName[59:62],
}

// AllowedExternalDirectivesString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AllowedExternalDirectivesString(s string) (AllowedExternalDirectives, error) {
	if val, ok := _AllowedExternalDirectivesNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AllowedExternalDirectivesNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AllowedExternalDirectives values", s)
}

// AllowedExternalDirectivesValues returns all values of the enum
func AllowedExternalDirectivesValues() []AllowedExternalDirectives {
	return _AllowedExternalDirectivesValues
}

// AllowedExternalDirectivesStrings returns a slice of all String values of the enum
func AllowedExternalDirectivesStrings() []string {
	strs := make([]string, len(_AllowedExternalDirectivesNames))
	copy(strs, _AllowedExternalDirectivesNames)
	return strs
}

// IsAAllowedExternalDirectives returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AllowedExternalDirectives) IsAAllowedExternalDirectives() bool {
	for _, v := range _AllowedExternalDirectivesValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AllowedExternalDirectives
func (i AllowedExternalDirectives) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AllowedExternalDirectives
func (i *AllowedExternalDirectives) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AllowedExternalDirectives should be a string, got %s", data)
	}

	var err error
	*i, err = AllowedExternalDirectivesString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for AllowedExternalDirectives
func (i AllowedExternalDirectives) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for AllowedExternalDirectives
func (i *AllowedExternalDirectives) UnmarshalText(text []byte) error {
	var err error
	*i, err = AllowedExternalDirectivesString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for AllowedExternalDirectives
func (i AllowedExternalDirectives) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for AllowedExternalDirectives
func (i *AllowedExternalDirectives) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = AllowedExternalDirectivesString(s)
	return err
}
